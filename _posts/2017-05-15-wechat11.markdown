---                 
layout:     post                 
title:      "聊天记录2017-05-15未整理版"                   
date:       2017-05-15 12:00:00                   
author:     "PaymentGroup"                   
header-img: "img/post-bg-wechat.jpg"                   
---                 
         
00:43:52	请问各位行家，有visa master的预付卡吗   
00:45:07	国内哪家银行或者支付公司可以办   
08:47:35	自动对账功能有人用过分布式核对的么？   
08:48:20	。。   
08:49:39	自动对账 分布式核对？   
08:50:34	两本帐？   
08:51:37	嗯，我们几百个账户，有的一份账单200万的交易数据。单机跑，半小时跑不完   
08:52:30	自动对账可以分渠道分商户，分布式对账不也是把单机的数据分类跑吗   
08:52:34	嗯，商户交易明细和支付公司两边核对   
08:53:01	是的这样。@XXX支付?   
08:53:40	目前也是测试阶段，不知道会不会有其他的坑   
08:54:31	有没有考虑到，使用map reduce来解决？   
08:55:43	对账坑都是在数据整理、处理阶段，都是小坑慢慢填[呲牙]   
08:58:12	有的，核对过程有更新操作，但是我们账务基础数据大，我们的dba评估更新效率不高，估计半小时出不来   
09:00:05	对账就是在支付系统中读写操作最大，分库分表加缓存   
09:00:32	@XXXPM?[偷笑]   
09:01:41	数据据量大了，一般都用HDFS去对   
09:02:36	比如Hadoop   
09:03:01	可以可以[呲牙]   
09:03:09	[捂脸]，可以分库分表。我们拆分开来会有几十张表dba加个字段都加的累死@XXX支付?   
09:03:17	@XXX北京 很早很早之前我也在联想做过硬件驱动开发。   
09:05:12	哈哈，那你要多动脑筋了！看来你可以用分布式框架对了   
09:06:05	很早很早以前啊，前辈啊   
09:10:00	[20170511专题：预付卡](http://mp.weixin.qq.com/s?__biz=MzI4OTQ3MTI2NA==&mid=2247483761&idx=1&sn=a4386673a09448ad151a3670dfa93e10&chksm=ec2fef3edb586628bb42167b593a38315bd28c93c836e23ca434121fac1e4689b6c9fdab6ca0&mpshare=1&scene=1&srcid=0515fhi0gU31BeX225GtAC96#rd)   
09:17:59	不客气，具体问题还得具体分析，对账可以单独拉个课题了，多商户多渠道大数据读写比对，数据参数抓取处理.....可以一起讨论   
09:19:09	问一个具体技术问题。准备接各个地市的银行的支付渠道，想搞一套可扩展的方案。现在有两个想法：一个是用pf4j插件化的开发模式，还有一个就是类似微服务，一个渠道一个服务。大家有什么建议呢   
09:19:30	这个群我感觉可以挖人了[呲牙]   
09:20:04	别啊，纯技术讨论群   
09:20:08	还有对账这块的处理的流程   
09:20:18	这块都可以 好好沟通梳理下哇   
09:21:21	@XXX合肥   
09:21:31	OSGI这种插件形式会不会很合适   
09:21:41	[愉快]   
09:22:08	是啊，滴滴，共享单车，这些都是客户使用一次上一次保险，一天保险公司和滴滴或者共享单车对账数据非常非常大，在整个对账流程、数据处理上都需要深度的思考   
09:23:20	有人研究过资产的登记系统吗 由于涉及到 二次转让 是否要复式记账 单边帐能搞定吗   
09:23:55	@XXX北京 刚@错了，其实也不需要那么动态，只是现在人力不足，需要各个业务方兄弟配合一起接   
09:24:52	不知道哪种模式好点，插件化的话最终还是部署再一起，外部服务感觉增加了调用链，一致性也不好保证   
09:25:19	@XXX北京 我们的是复式的记账   
09:25:32	但是贷方基本上只有发行人。   
09:26:18	你们是金正 和 恒生的系统吧 设计方案我好像有 我研究下   
09:26:33	我们不用他们的   
09:26:36	自己开发的系统   
09:27:01	求分享金证和恒生的系统啊   
09:27:15	我找找呀   
09:28:45	对账是个事   
09:35:19	对于系统建设来说，建议走微服务，不走插件化，从设计角度上看，服务与是业务对齐的，更合理   
09:39:29	预付费卡和贷记卡的区别很容易区分，贷记卡是可以透支的，而预付费卡是不能的，必须先充值后消费。 预付费卡和借记卡的区别主要包括预付费卡不记息，也不能提现   
09:39:42	这个不能提现是绝对的说法吗？   
09:40:15	@XXX北京 微服务就涉及到分布式事物的问题~   
09:41:07	@sinory?是的，不能提现，最多原路退回   
09:41:27	预付费卡 还有能在ATM取款的   
09:41:58	@blue?那是违规   
09:42:05	比如中银通和银联发的   
09:42:29	那是另外一个逻辑   
09:42:40	微服务先考虑业务划分，再考虑数据分布，分布式事务是根据数据分布来的，当然，这个问题可以参考一些分布式事务的解决方案，比如2PC或柔性事务，   
09:42:41	走的联名卡   
09:42:46	一般机构是不能提现   
09:42:51	有发卡资质也不行？   
09:43:24	不能   
09:43:57	法规只有原路退款吧，没有提现一说，看产品怎么包装了   
09:45:32	没有「提现」这个说法，但是可以「退款」，当然也可以全额退款。实际上，可以包装成提现   
09:45:41	如果允许提现，那么预付卡就是洗钱了   
09:46:04	因为预付卡是不记名可以转赠的   
09:46:17	这样就有点倒卡了   
09:46:20	退款也是严格的原路退回 ？   
09:46:45	怎么包装成提现？   
09:47:04	可以退回账户余额吗？   
09:48:06	分布式事务，很多时候保证最终一致性就好吧，这个应该是次要考虑的，合理的补偿机制可以弥补很多   
09:49:22	微服务本质和分布式事务就是矛盾的。   
09:49:27	是的，只要保证最终一致性，并且关键接口一定要做幂等   
09:49:28	以前的第三方支付牌照中，只有预付卡牌照是可以合法进行资金沉淀的，但网络支付牌照进行支付账户分级后，这一点优势也荡然无存   
09:50:29	@XXXX 所以现在一些电商在持有网络支付牌照后，为了让资金尽量留在体系内运转，内部消化，退款到余额很常见   
09:50:59	退回余额以后是不是可以提现？   
09:51:13	这种提现算是洗钱吗？   
09:51:39	这个余额是指的是C端充值人的余额还是B端发卡人的余额   
09:51:41	@XXX北京 嗯~ 事务执行计划、补偿计划及各种状态检查和重试。   
09:51:46	你可以试试[呲牙]同卡进出并不被严格执行   
09:52:21	@XXX产品总监 ,是的   
09:53:29	为了减少分布式事务，在微服务设计上是有技巧的，要合理划分，同时，在数据分布上也有一定的技巧   
09:53:30	另外，有一点要纠正下，预付卡有记名和不记名两种类型，并不都是不记名卡   
09:54:36	微服务分布式事务 也比较麻烦   
10:02:09	支付事务的一致性是个问题   
10:06:49	这个东西就是麻烦一些 其实方案很成熟   
10:07:06	无非就是 tcc 和 最终一致   
10:09:39	服务治理比分布式事务更重要   
10:10:43	@XXX杭州?热点账户不一定是会计那边。比如商户账户的余额更新   
10:16:07	业务系统记流水，但不会每笔都更新商户账户余额，会计系统每天日结后再更新商户余额   
10:16:46	实时入账、异步入账、批量入账   
10:17:19	如果余额不实时更新的话，那么怎么解决1块钱买两款钱东西的问题呢   
10:17:24	@XXX杭州   
10:17:42	@XXX北京?恩，但应用层面也要做不少事   
10:18:12	新网的哥们，你说的支持账户分级是什么意思   
10:19:42	出账方是实时记余额的，但是收款方一笔都是商户账户，实时记录会存在锁账户问题，商户一笔存在两张账户，结算账户和提现账户，结算账户的钱商户是不能操作的，只能在日结后系统自动转账到提现账户，然后商户才能提现。   
10:21:27	@XXX杭州?工资发放是典型的一借多贷业务，如果走逐笔，借方账户就是典型热点。不过现在发工资都不走实时了。   
10:21:42	@XXX杭州?实时记录会存在锁账户问题，所以得锁分离啊   
10:23:04	我们现在对于商户账户 做了锁分离 热点粒度降的最小 生产环境运行良好 稳定   
10:23:34	你刚刚说的会计这边 其实我的理解是内部户余额更新   
10:25:03	@XXX研发 锁分离我们还没有使用，我们目前还是基于mysql行级锁做的处理，如果能够解决锁账户的问题，实时更新余额也是可以的[微笑]   
10:29:25	@XXX珠海 工资发放的业务没接触过，如果是逐笔处理的话，也不会产生热点问题。[微笑]   
10:30:45	@XXX研发 锁分离的技术方案可否简单分享下？[呲牙]   
10:36:04	@XXX杭州?逐笔是串行，锁等待时间太长   
10:37:40	锁分离 我抛一个砖 1：考虑业务场景 是否可以每笔业务分子账户 避免冲突。 如果一定要实时记账存在并发 首先事务处理内容要足够的小 仅记录流水和修改余额 其他异步 2：账户操作前redis并发锁控制操作权限获取，设置超时及尝试间隔 3：账户实体本身增加乐观锁 捕获锁异常自动重试 4：使用akka框架 actor模式 （测试阶段）   
10:39:12	软件除了技术架构外 更底层的应该有个数据架构 以前的软件处理的只是一个商店或一个单位的数据 看不出什么 现在要面对的是全民的数据 现在的很多问题如事务处理应该从数据层面去找解决方案 跳出软件框框回看现实世界里并行发生的各种事件 这些人物事件之间其实相互关联很少 干嘛都把他们塞在一起呢是吧   
10:39:48	领域驱动？   
10:44:11	不相关的数据塞在一起 造成每次处理时都要先排除千千万万与其无关的数据 定位-加锁-修改 坏的情况还会触发整体联动 好像是很高深的样子呵呵   
10:47:36	我认为恰恰相反，随着科技发展，事物之间的联系会越来越密切，不论是直接还是间接，数据处理始终是个问题，只不过是如何减少复杂度的问题   
10:47:46	结构的复杂造成了处理逻辑的复杂   
10:48:26	哈哈，说到底还是认知的局限性   
10:55:12	@XXX北京 多谢分享~   
10:56:56	客气～   
11:15:00	@XXX北京?我要说关系数据库是个坑 大数据是巨头的预谋你估计要跳脚 权当娱乐吧   
11:20:22	搞什么？这分享的是啥玩意？   
11:28:09	跑题了 抱歉[握手]   
11:30:45	出款第一步减余额必须实时更新余额吧，通常是复试记账，另一方可以非实时，中间账户加减都可非实时；账户更新余额可以行锁（注意等待时间），cas快速失败。   
   
12:37:39	@XXX北京?请教一下你们加共享锁时落实到操作上就是设置隔离级别吧 不知道你们怎么实现的 自己写还是用什么框架   
12:47:12	锁实现是依靠redis键值的有效期 加while循环自动间隔重试 比较常见的redis分布式锁实现了，数据库层级就是乐观锁简单说就是靠版本号管理 然后你说的隔离级别是指事务隔离级别？   
12:47:25	羡慕北京童鞋，我也想参加[可怜]   
12:50:34	@XXX合肥?这个我这边是类似你说的第二种方案，我们是一个通道一个服务。通过服务注册，目录查询发现服务。上线后通过控制中心配置通道上下线   
12:54:04	@XXX北京?是的 你说的版本号和   
12:55:28	zk有分布式锁   
12:56:34	我们用的oracle 默认隔离级别Read Committed   
12:57:10	。。。在外面redis的功能差不多吧 感觉最终起作用的还是隔离级别 对单键值和范围的还有多种可能 感觉最终还是要依靠数据库本身的控制才可靠   
12:58:03	mysql的好像是rr   
12:58:15	不是啊 分布式锁是在操作前获得权限   
12:58:36	如果单靠数据库 是所有逻辑操作执行完成   
12:58:55	提交时控制 本身也是在做无用计算了   
12:59:50	知道 在共享内存读写个标记 当前是我的才发起事务   
13:00:06	嗯   
13:01:40	这个和记录里的版本号类似我觉得 不同隔离级别读出来的是有偏差的   
13:03:00	当然redis可以减轻数据库的一些压力 但还是不能完全依赖   
13:04:19	这个取决于你如何定义redis的键值了 这个键值是否有必要有版本的概念 嗯大家实现方式各不同吧   
13:04:50	市面上号称实现xa的方案可靠性不知怎样 性能呢   
13:07:07	是的 redis可以提升性能 设计好的话数据库那里可以用轻量级别 只是最理想化的   
13:09:31	嗯 静待群里更多解决方案 并发是挺麻烦   
13:15:21	算是业界难题吧 期待这方面有更多分享[微笑]   
13:19:22	@blue?zk在这里和redis角色差不多 感觉zk还重了些   
13:21:21	是的 角色差不多   
13:56:42	@XXX北京?前面你说的while循环尝试申请redis锁这里 会不会有性能问题 因为等的时候会占用一个线程 虽然一般都不会出现等多次的情况 我想有无可能转成异步让redis或者谁来通知 再触发继续 只是个想法啊   
14:01:17	这里不适合用通知的方式   
14:02:06	因为业务耦合的很紧密，通知又需要时间，因此一来会造成系统复杂度提高，二来反而增加了操作时间。   
14:02:35	[java异步无锁共享内存 可实现进程间通信](https://github.com/peptos/traffic-shm)   
14:05:20	或许折中方案 有个东西专门和redis打交道 负责全部锁申请事务 并负责唤醒下游的异步事件 可以节省线程消耗   
14:05:34	嗯 其实所有的并发最终本质解决方案 都是串行 我一直想把akka的actor模式用起来 但是 还在摸索 不确认是不是账户相关操作的一种解决方案 只是个建议   
14:07:45	你说的专门有个东西和redis打交道，是有的，但是其实就是自己写个服务方，封闭所有对redis和数据库层面的操作，对外暴露简单的接口   
14:08:17	我记得有个专门的名词，但是忘了。。。   
14:08:49	akka和直接用netty差不多吧 用原生的好我觉得 在没有作用到数据本身时可以不用要求串行 也是个人理解   
14:10:57	另外scala是吗有人批它 用回java好 都是一家之言   
14:13:20	@mark?自己写也可以吧 就是探讨流程上优化的可能   
14:21:40	@XXX?底层的东西复杂多变 文档里写的都不一定对 研究罢了   
14:22:52	对的，主要是在流程上和线程模型上要掌握好   
14:36:12	或者第一次尝试失败就转异步 在平时第一次成功的占多数情况 如果失败说明可能碰到秒拍这类场景了 不管是等还是超时失效都不好 异步这时候才是最好的   
14:46:50	应用场景不同要求的处理逻辑不同 虽然都是一个入口 但面对的条件可能千差万别   
15:39:59	@XXX?http://www.yinwang.org/blog-cn/2016/01/18/java   
15:52:15	王垠的文章吧？   
15:55:25	是的   
15:56:48	我只知道淘宝从php换成了java   
15:56:58	但是我同学说 php是世界上最好的...   
15:59:03	独立思考 即使是错过了不会损失太大 如果上错了船那就代价大了 很多市面上流行的概念也好方案也好水分很大   
16:03:15	php不了解多少 一个请求一个进程的方式是吗 访问量少当然快 大了是直接考验系统能力了 可能理解有误啊   
16:11:15	[OK]   
16:27:29	php 不是 性能爆表了吗 世界上最好的变成语言[呲牙]   
17:12:21	这个风控架构是适用于哪里的   
17:17:52	[强]   
17:19:13	这个风控系统是实时的吗？   
17:19:24	就是交易直接送风控系统   
17:19:44	处理时间大约多长时间？   
17:20:06	实时和准实时吧   
17:24:11	[鼓掌]   
17:24:15	准实时应该，时间百毫秒级别吧   
17:24:34	那不错   
17:24:44	百毫秒到秒级   
17:24:55	交易场景反欺诈。才是你们说的这样   
17:25:07	这样风控应该是以规则为主吧   
17:25:12	风控必须要在100ms内返回结果   
17:25:43	真正的风控，没有实时一说，有的公司，有自动风控，偏向于较简单的因子项   
17:25:44	里面也有实时的好像   
17:25:46	风控要求的是准实时性   
17:26:10	更多的风控系统做的事风控决策，有部分决策建议是实时的。   
17:26:15	那天问过财付通的，他们的交易一般处理时间不高于300毫秒   
17:26:28	加上监控和响应   
17:26:40	规则的话，可以做到实时啊   
17:26:58	结果响应也是实时   
17:27:14	当然也有准实时   
17:27:32	这个检查的是交易场景反欺诈。   
17:27:34	好厉害啊   
17:27:43	[强]   
17:27:54	各位 限额限次 你们是放风控系统还是单独抽出来做？   
17:28:07	盗刷或者其他的异常。   
17:28:08	如果分开 是先过风控还是限额限次？   
17:28:15	风控应该需要加上更多的纬度因子对交易进行验证   
17:28:35	对的   
17:28:40	资金上，只能发现关联性   
17:28:41	尽量多的数据   
17:28:47	嗯   
17:28:55	类似准入。   
17:31:49	其实交易数据还是有限   
17:38:53	没想到风控的需求这么复杂 就是识别一个异常吧 另一个是快速响应   
17:42:41	复杂就在于识别异常。   
17:43:00	问一下那个地方有比较详细的介绍风控规则吗？   
17:43:45	异常不好识别，可以识别正常   
17:45:57	@XXX深圳?财付通有这样共享的文档么，是不是也可以分享下你们那边的做法？   
17:46:20	[皱眉]   
17:46:24	识别异常 就是根据多维度识别 有业务数据 也有设备数据   
17:46:37	很期待你们财付通那边做法   
17:48:31	对于风控，规则属于涉密的数据。能够对外提供的，也是一些通用的，简单的规则。这种自己想想也能知道有什么了。基于那么几个维度。   
17:49:37	大家多讨论，思路就会明朗，文档这样的东西不是很好分享，多维度的数据收集才是风控的核心   
17:50:38	数据是基础   
17:50:58	没数据，再多的规则，再好的模型，也只是摆设。   
17:53:49	规则主要就是： 上下文Context、统计Stats、信誉Reputation、计数Count、模式pattern、速率Velocity等类型及其组合   
17:54:06	@XXX深圳?那真的好可惜，太遗憾了[捂脸]   
17:54:28	问个问题 风控系统应该是个很独立的产品 如果在做支付交易的时候 需要某些数据 比如用户的一些数据 该怎么获取？让支付系统送还是自己通过接口查？但支付系统可能并不关心这些信息，（支付系统也不想查） 如果风控系统自己查 必然会影响响应时间 该怎么处理？   
17:54:56	这里说的查 是调用用户相关接口   
17:55:46	@XXX苏州?[憨笑]大家都在摸索   
17:56:13	我看有个思路是键盘击打的频率，时间间隔，然后建模，确实熟练的人和盗卡首次熟人的人还是在模型上能区分开的   
17:56:14	嗯，一起摸索[机智]   
17:57:03	感觉应该分级别 比如涉及到钱的应该严密监控 未产生钱变动的可以慢点响应 另外既然风控这么敏感 软件设计时在正常流程上应该给风控强行介入留个接口吧 风险产生的可能只有万分之一 但是这么看风控消耗的资源可能是十分之一 呵呵   
18:03:19	另一个思路是延时分析 比如确立异常等级 一旦级别高的出现了才启动全模型检测分析 没出现高级别异常前就是记录日志 这样把资源用到核心的处理上   
18:04:58	风控系统 有接口规范 需要的数据写在规范里，调用者按规范传要素 就完，至于分级 什么的 都是内部处理方式了   
18:10:52	我两个手机号在微信里绑定银行卡 都绑定成功了 过阵子微信说我帐号异常需要他人认证才能解锁 级别应该是有涵盖优先权重这些概念的 银行卡绑定成功但是被其他规则给否定了 合理吗   
18:18:25	可能他设置一个手机多个号的危险等级比银行账户可信度的级别更高？   
18:38:58	真正涉及到钱变动的流程也不会很多吧 比如转账 而且从启动转账到完成中间环节多耗时长 要监控也不是难事 其他次要的记日志然后离线跑分析就可以了   
   
      
      
